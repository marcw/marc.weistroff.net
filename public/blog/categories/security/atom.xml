<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: security | Another brain on earth]]></title>
  <link href="http://marc.weistroff.net/blog/categories/security/atom.xml" rel="self"/>
  <link href="http://marc.weistroff.net/"/>
  <updated>2013-12-05T12:21:19+01:00</updated>
  <id>http://marc.weistroff.net/</id>
  <author>
    <name><![CDATA[Marc Weistroff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Feature flags with Symfony2]]></title>
    <link href="http://marc.weistroff.net/2012/01/09/simple-feature-flags-symfony2/"/>
    <updated>2012-01-09T00:00:00+01:00</updated>
    <id>http://marc.weistroff.net/2012/01/09/simple-feature-flags-symfony2</id>
    <content type="html"><![CDATA[<p>Feature flags is a really common design in modern web applications and is
heavily used by startups. It permits you to enable/disable features for some
users or groups of users. It&rsquo;s really handy if you want to deploy to production
a feature for testing purpose in order to have data on how your infrastructure
reacts in a live environment.</p>

<p>Let&rsquo;s have some fun and try to implements a simple feature flags design in your
Symfony2 project without writing too much lines of PHP. Sure, we will use the
as complex as powerful Security component for that. I won&rsquo;t dig deep inside it,
so you&rsquo;ll better be well versed about <a href="http://symfony.com/doc/current/book/security.html#roles">roles and roles
hierarchy</a>.</p>

<p>What we want for this project is three types of feature groups: &lsquo;alpha&rsquo;, &lsquo;beta&rsquo;
and &lsquo;prod&rsquo;. I want the admins of my website to have access to the
alpha/unstable features, the beta testing group to the beta features and all
the oser users to all the rest of my application.</p>

<p>We can express this by using role hierarchy:</p>

<p>``` yaml app/config/security.yml
security:</p>

<pre><code>role_hierarchy:
    ROLE_ADMIN: ROLE_USER
    ROLE_SUPER_ADMIN: ROLE_USER,ROLE_ADMIN,ROLE_ALLOWED_TO_SWITCH

    FEATURE_ALPHA: FEATURE_BETA, FEATURE_SUPER_SECRET
    FEATURE_BETA: FEATURE_PROD, FEATURE_FOOBAR
    FEATURE_PROD: FEATURE_FOO, FEATURE_BAR
</code></pre>

<p>```</p>

<p>Thus, anyone whom is granted the <code>FEATURE_ALPHA</code> role will have access to all
the features and the other groups won&rsquo;t have access to the &ldquo;lower&rdquo; features.</p>

<p>This is a rad way of defining who have access to what, but currently,
it&rsquo;s not supported by the SecurityBundle because only roles prefixed by
<code>ROLE_</code> are supported by the current voter.</p>

<p>So, we need to define a new voter that supports the newly created <code>FEATURE_*</code>
roles. Is it complicated? Hell no. Add this to your bundle xml configuration:</p>

<p>``` xml Acme/Bundle/AwesomeBundle/Resources/config/config.xml
<service id="awesome.feature_hierarchy.voter" class="%security.access.role_hierarchy_voter.class%"></p>

<pre><code>&lt;argument type="service" id="security.role_hierarchy" /&gt;
&lt;argument&gt;FEATURE_&lt;/argument&gt;
&lt;tag name="security.voter" /&gt;
</code></pre>

<p></service>
```</p>

<p>This simple piece of xml will register a new voter based on the actual role
hierarchy. The difference is that this voter will be specialised in the
<code>FEATURE_</code> prefixed roles.</p>

<p>Now, we need to specify in our user class how the roles will be distributed:</p>

<p>``` php
&lt;?php
// You can implement your own logic there, be inventive.
public function getRoles()
{</p>

<pre><code>if ($this-&gt;isAdmin) {
    return array('ROLE_ADMIN', 'FEATURE_ALPHA');
}

if ($this-&gt;isBetaTester) {
    return array('ROLE_ADMIN', 'FEATURE_BETA');
}

return array('ROLE_USER', 'FEATURE_PROD');
</code></pre>

<p>}
```</p>

<p>From now on, the user class will be able to tell wich roles he has, and the
Security context will be able to vote on them. The only thing left to do is to
&ldquo;secure&rdquo; parts of your application.</p>

<p>In your templates:</p>

<p>``` html

{% if app.security.isGranted(&lsquo;FEATURE_SUPER_SECRET&rsquo;)) %}</p>

<pre><code>{# bla bla bla #}
</code></pre>

<p>{% endif %}

```</p>

<p>or in your controllers:</p>

<p>``` php
&lt;?php
public function indexAction()
{</p>

<pre><code>if ($this-&gt;get('security.context')-&gt;isGranted('FEATURE_SUPER_SECRET')) {
    // do stuff
}
</code></pre>

<p>}
```</p>

<p>or your routes thanks to the built-in firewall:</p>

<p>``` yaml app/config/security.yml
security:</p>

<pre><code>access_control:
    -
        path: ^/my/route/to/my/feature.*$
        roles: [FEATURE_SUPER_SECRET]
</code></pre>

<p>```</p>

<p>Here we are! You enabled feature flags in your project with a few lines of PHP
and 5 lines of XML. Have fun!</p>
]]></content>
  </entry>
  
</feed>
