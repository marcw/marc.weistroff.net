<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CORS | Another brain on earth]]></title>
  <link href="http://marc.weistroff.net/blog/categories/cors/atom.xml" rel="self"/>
  <link href="http://marc.weistroff.net/"/>
  <updated>2014-08-23T12:43:42+02:00</updated>
  <id>http://marc.weistroff.net/</id>
  <author>
    <name><![CDATA[Marc Weistroff]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Authenticated Cross-Domains AJAX Requests with CORS]]></title>
    <link href="http://marc.weistroff.net/2012/11/23/Cross-Domain-AJAX-withCredentials/"/>
    <updated>2012-11-23T00:00:00+01:00</updated>
    <id>http://marc.weistroff.net/2012/11/23/Cross-Domain-AJAX-withCredentials</id>
    <content type="html"><![CDATA[<p>Yesterday, I lost a significant amount of time dealing with cross-domain
AJAX requests and I thought I might share a bit of what I learned.</p>

<ol>
<li><p>jQuery 1.5.0 is BROKEN when it comes to cross-domain AJAX requests.
Upgrade to at least jQuery 1.5.1.</p></li>
<li><p><code>Access-Control-Allow-Origin</code> WON&rsquo;T accept a wildcard value if your
XHR&rsquo;s <code>withCredentials</code> option is set to <code>true</code>. Also, it won&rsquo;t
accept a list of origin. If you want to accept requests from a lot
of domains, you can match the <code>Origin</code> request header against a set
of domains and set the <code>Access-Control-Allow-Origin</code> accordingly.</p></li>
<li><p><code>Access-Control-Allow-Headers</code> and <code>Access-Control-Allow-Methods</code>
CORS header does not support * as a value. You have to be specific,
even during your prototyping phase.</p></li>
</ol>


<p>Hope it helps.</p>
]]></content>
  </entry>
  
</feed>
